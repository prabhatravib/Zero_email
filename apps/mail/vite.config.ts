import { paraglideVitePlugin } from '@inlang/paraglide-js';
import { cloudflare } from '@cloudflare/vite-plugin';
import { reactRouter } from '@react-router/dev/vite';
import tsconfigPaths from 'vite-tsconfig-paths';
import oxlintPlugin from 'vite-plugin-oxlint';
import babel from 'vite-plugin-babel';
import tailwindcss from 'tailwindcss';
import { defineConfig } from 'vite';
import dedent from 'dedent';

const ReactCompilerConfig = {
  /* ... */
};

export default defineConfig(({ mode }) => {
  // Determine the environment for Cloudflare
  const wranglerEnv = process.env.WRANGLER_ENV || (mode === 'production' ? 'render' : 'local');
  
  return {
    plugins: [
      oxlintPlugin(),
      reactRouter(),
      cloudflare({
        // Configure the environment for Cloudflare
        env: wranglerEnv,
      }),
      babel({
        filter: /\.[jt]sx?$/,
        babelConfig: {
          presets: ['@babel/preset-typescript'], // if you use TypeScript
          plugins: [['babel-plugin-react-compiler', ReactCompilerConfig]],
        },
      }),
      tsconfigPaths(),
      {
        name: 'add-headers',
        applyToEnvironment: (env) => env.name === 'client',
        generateBundle() {
          this.emitFile({
            fileName: '_headers',
            type: 'asset',
            source: dedent`
              # Autogenerated

              /assets/*
                ! Cache-Control
                  Cache-Control: public, immutable, max-age=31536000
            `,
          });
        },
      },
      paraglideVitePlugin({
        project: './project.inlang',
        outdir: './paraglide',
        strategy: ['cookie', 'baseLocale'],
      }),
    ],
    server: {
      port: 3000,
      warmup: {
        clientFiles: ['./app/**/*', './components/**/*'],
      },
      // Fix MIME type issues
      headers: {
        'Cross-Origin-Embedder-Policy': 'unsafe-none',
        'Cross-Origin-Opener-Policy': 'unsafe-none',
      },
      // Ensure proper MIME types for JavaScript files
      fs: {
        strict: false,
      },
    },
    // Fix MIME type issues in development
    optimizeDeps: {
      include: [
        'react',
        'react-dom',
        '@react-router/dev',
      ],
    },
    css: {
      postcss: {
        plugins: [tailwindcss()],
      },
    },
    //   ssr: {
    //     optimizeDeps: {
    //       include: ['novel', '@tiptap/extension-placeholder'],
    //     },
    //   },
    build: {
      sourcemap: false,
      // Ensure proper MIME types in build
      rollupOptions: {
        output: {
          assetFileNames: (assetInfo) => {
            const info = assetInfo.name.split('.');
            const ext = info[info.length - 1];
            if (/\.(css)$/.test(assetInfo.name)) {
              return `assets/css/[name]-[hash][extname]`;
            }
            if (/\.(png|jpe?g|svg|gif|tiff|bmp|ico)$/i.test(assetInfo.name)) {
              return `assets/images/[name]-[hash][extname]`;
            }
            return `assets/[name]-[hash][extname]`;
          },
          chunkFileNames: 'assets/js/[name]-[hash].js',
          entryFileNames: 'assets/js/[name]-[hash].js',
        },
      },
    },
    resolve: {
      alias: {
        tslib: 'tslib/tslib.es6.js',
      },
    },
    define: {
      // Ensure environment variables are available at build time
      'process.env.WRANGLER_ENV': JSON.stringify(wranglerEnv),
      'process.env.NODE_ENV': JSON.stringify(mode),
      // Force environment variables to be available
      'import.meta.env.VITE_PUBLIC_BACKEND_URL': JSON.stringify(process.env.VITE_PUBLIC_BACKEND_URL),
      'import.meta.env.VITE_PUBLIC_APP_URL': JSON.stringify(process.env.VITE_PUBLIC_APP_URL),
    },
  };
});
