import { paraglideVitePlugin } from '@inlang/paraglide-js';
import { cloudflare } from '@cloudflare/vite-plugin';
import { reactRouter } from '@react-router/dev/vite';
import tsconfigPaths from 'vite-tsconfig-paths';
import oxlintPlugin from 'vite-plugin-oxlint';
import babel from 'vite-plugin-babel';
import tailwindcss from 'tailwindcss';
import { defineConfig } from 'vite';
import dedent from 'dedent';
import path from 'path';

const ReactCompilerConfig = {
  /* ... */
};

export default defineConfig({
  define: {
    'import.meta.env.VITE_PUBLIC_BACKEND_URL': JSON.stringify('https://zero-api-production.prabhatravib.workers.dev'),
    'import.meta.env.VITE_PUBLIC_APP_URL': JSON.stringify('https://infflow.prabhatravib.workers.dev'),
  },
  plugins: [
    oxlintPlugin(),
    reactRouter(),
    cloudflare({
      environments: {
        production: {
          name: 'zero-production',
          vars: {
            VITE_PUBLIC_BACKEND_URL: 'https://zero-api-production.prabhatravib.workers.dev',
            VITE_PUBLIC_APP_URL: 'https://infflow.prabhatravib.workers.dev',
          },
        },
      },
      env: 'production',
    }),
    babel({
      filter: /\.[jt]sx?$/,
      babelConfig: {
        presets: ['@babel/preset-typescript'], // if you use TypeScript
        plugins: [['babel-plugin-react-compiler', ReactCompilerConfig]],
      },
    }),
    tsconfigPaths(),
    {
      name: 'add-headers',
      applyToEnvironment: (env) => env.name === 'client',
      generateBundle() {
        this.emitFile({
          fileName: '_headers',
          type: 'asset',
          source: dedent`
            # Autogenerated

            /assets/*
              ! Cache-Control
                Cache-Control: public, immutable, max-age=31536000
          `,
        });
      },
    },
    {
      name: 'cleanup-paraglide',
      buildStart() {
        // Ensure clean paraglide directory
        const fs = require('fs');
        const path = require('path');
        const paraglideDir = path.resolve('./paraglide');
        if (fs.existsSync(paraglideDir)) {
          fs.rmSync(paraglideDir, { recursive: true, force: true });
        }
      },
    },
    paraglideVitePlugin({
      project: './project.inlang',
      outdir: './paraglide',
      strategy: ['cookie', 'baseLocale'],
    }),
  ],
  server: {
    port: 3000,
    warmup: {
      clientFiles: ['./app/**/*', './components/**/*'],
    },
  },
  css: {
    postcss: {
      plugins: [tailwindcss()],
    },
  },
  //   ssr: {
  //     optimizeDeps: {
  //       include: ['novel', '@tiptap/extension-placeholder'],
  //     },
  //   },
  esbuild: {
    pure: ['console.log'],
  },
  build: {
    sourcemap: false,
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './'),
      tslib: 'tslib/tslib.es6.js',
    },
  },
});
